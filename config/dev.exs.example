use Mix.Config

config :tai, send_orders: false

config :tai,
  advisor_groups: %{
    create_and_cancel_pending_order: [
      advisor: Examples.Advisors.CreateAndCancelPendingOrder.Advisor,
      factory: Tai.Advisors.Factories.OnePerVenueAndProduct,
      products: "gdax.btc_usd"
    ],
    log_spread: [
      advisor: Examples.Advisors.LogSpread.Advisor,
      factory: Tai.Advisors.Factories.OnePerVenueAndProduct,
      products: "binance.btc_usdt gdax.btc_usd poloniex.btc_usdt"
    ],
    fill_or_kill_orders: [
      advisor: Examples.Advisors.FillOrKillOrders.Advisor,
      factory: Tai.Advisors.Factories.OnePerVenueAndProduct,
      products: "binance.btc_usdt"
    ]
  }

config :tai,
  venues: %{
    binance: [
      adapter: Tai.VenueAdapters.Binance,
      products: "btc_usdt ltc_usdt eth_usdt",
      accounts: %{main: %{}}
    ],
    poloniex: [
      adapter: Tai.VenueAdapters.Poloniex,
      products: "btc_usdt ltc_usdt eth_usdt",
      accounts: %{main: %{}}
    ],
    gdax: [
      adapter: Tai.VenueAdapters.Gdax,
      products: "btc_usd ltc_usd eth_usd",
      accounts: %{
        main: %{
          # https://docs.pro.coinbase.com/#api
          # api_url: "https://api-public.sandbox.pro.coinbase.com",
          api_url: "https://api.pro.coinbase.com",
          api_key: System.get_env("GDAX_API_KEY"),
          api_secret: System.get_env("GDAX_API_SECRET"),
          api_passphrase: System.get_env("GDAX_API_PASSPHRASE")
        }
      }
    ]
  }

config :tai,
  exchanges: %{
    binance: [
      supervisor: Tai.ExchangeAdapters.Binance.Supervisor,
      accounts: %{main: %{}}
    ],
    poloniex: [
      supervisor: Tai.ExchangeAdapters.Poloniex.Supervisor,
      accounts: %{main: %{}}
    ],
    gdax: [
      supervisor: Tai.ExchangeAdapters.Gdax.Supervisor,
      accounts: %{
        main: %{
          # https://docs.pro.coinbase.com/#api
          # api_url: "https://api-public.sandbox.pro.coinbase.com",
          api_url: "https://api.pro.coinbase.com",
          api_key: System.get_env("GDAX_API_KEY"),
          api_secret: System.get_env("GDAX_API_SECRET"),
          api_passphrase: System.get_env("GDAX_API_PASSPHRASE")
        }
      }
    ]
  }

config :echo_boy, port: 4200

config :ex_poloniex,
  api_key: System.get_env("POLONIEX_API_KEY"),
  api_secret: System.get_env("POLONIEX_API_SECRET")

config :binance,
  api_key: System.get_env("BINANCE_API_KEY"),
  secret_key: System.get_env("BINANCE_API_SECRET")

config :logger, backends: [LoggerJSON]
